name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # --- Code auschecken ---
      - name: Checkout
        uses: actions/checkout@v4

      # --- Go einrichten (für deinen Buildscript) ---
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      # --- Buildscript ausführbar machen & Binary bauen ---
      - name: Make build script executable
        run: chmod +x scripts/buildprod.sh

      - name: Build production binary
        run: ./scripts/buildprod.sh

      - name: Show build output
        run: |
          ls -lh notely || true
          file notely || true

      # --- Artefakt weglegen (optional, aber praktisch) ---
      - name: Upload notely artifact
        uses: actions/upload-artifact@v4
        with:
          name: notely-linux
          path: notely

      # --- Docker Build & Push zu Docker Hub (ohne GCP nötig) ---
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract short SHA
        id: meta
        run: echo "TAG=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      # Tipp: Wenn dein Dockerfile strikt linux/amd64 erwartet, nimm nur amd64.
      # Multi-Arch ist optional; hier konservativ nur amd64 für Stabilität.
      - name: Build and Push (Docker Hub)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/notely:latest
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/notely:${{ steps.meta.outputs.TAG }}

      # ---------------------------
      #   Cloud Run Deploy (GUARDED)
      #   -> wird NUR ausgeführt,
      #      wenn GCP Secrets existieren
      # ---------------------------

      - name: Auth to Google Cloud
        if: ${{ secrets.GCP_PROJECT_ID != '' && secrets.GCP_SA_KEY != '' }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        if: ${{ secrets.GCP_PROJECT_ID != '' && secrets.GCP_SA_KEY != '' }}
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Falls du später auf Artifact Registry pushst, kannst du diese Zeile aktivieren:
      # - name: Configure Docker for Artifact Registry
      #   if: ${{ secrets.GCP_PROJECT_ID != '' && secrets.GCP_SA_KEY != '' }}
      #   run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Deploy to Cloud Run
        if: ${{ secrets.GCP_PROJECT_ID != '' && secrets.GCP_SA_KEY != '' }}
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          REGION: us-central1
          # Wenn du später auf Artifact Registry pushst, setze deine echte Image-URL hier:
          # IMAGE_URL: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/notely/notely:latest
          #
          # Übergangsweise könntest du (nicht empfohlen) auch ein Docker-Hub-Image angeben,
          # aber der empfohlene Weg ist AR. Wir lassen es hier als Platzhalter:
          IMAGE_URL: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/notely/notely:latest
        run: |
          echo "Deploying $IMAGE_URL to Cloud Run in $REGION (project: $PROJECT_ID)"
          gcloud run deploy notely \
            --image "$IMAGE_URL" \
            --region "$REGION" \
            --allow-unauthenticated \
            --project "$PROJECT_ID" \
            --max-instances=4 \
            --ingress=all

